<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentTypesAndVariationsMustMatchMessageFormat" xml:space="preserve">
    <value>Argument types and argument variations have differing number of items.</value>
  </data>
  <data name="ArgumentTypesAndVariationsMustMatchTitle" xml:space="preserve">
    <value>Argument types and argument variations mismatch</value>
  </data>
  <data name="AttributeArgumentsMustBeValidMessageFormat" xml:space="preserve">
    <value>Invalid attribute argument.</value>
  </data>
  <data name="AttributeArgumentsMustBeValidTitle" xml:space="preserve">
    <value>Invalid attribute argument</value>
  </data>
  <data name="DontDefineMultipleAuxiliaryPatchMethodsMessageFormat" xml:space="preserve">
    <value>Multiple auxiliary patch methods of the same kind are defined. Only the first one will be executed.</value>
  </data>
  <data name="DontDefineMultipleAuxiliaryPatchMethodsTitle" xml:space="preserve">
    <value>Multiple auxiliary patch methods of the same kind are defined</value>
  </data>
  <data name="DontUseIndividualAnnotationsWithBulkPatchingMessageFormat" xml:space="preserve">
    <value>Bulk patching can't be combined with individual target method annotations.</value>
  </data>
  <data name="DontUseIndividualAnnotationsWithBulkPatchingTitle" xml:space="preserve">
    <value>Bulk patching can't be combined with individual target method annotations</value>
  </data>
  <data name="DontUseMultipleBulkPatchingMethodsMessageFormat" xml:space="preserve">
    <value>Only single method of bulk patching is allowed.</value>
  </data>
  <data name="DontUseMultipleBulkPatchingMethodsTitle" xml:space="preserve">
    <value>Only single method of bulk patching is allowed</value>
  </data>
  <data name="HarmonyPatchAttributeMustBeOnTypeMessageFormat" xml:space="preserve">
    <value>Missing HarmonyPatch attribute on type. Specified patches will not be discovered.</value>
  </data>
  <data name="HarmonyPatchAttributeMustBeOnTypeTitle" xml:space="preserve">
    <value>Missing HarmonyPatch attribute on type</value>
  </data>
  <data name="TargetMethodMustBeFullySpecifiedMessageFormat" xml:space="preserve">
    <value>Not enough information to target a method.</value>
  </data>
  <data name="TargetMethodMustBeFullySpecifiedTitle" xml:space="preserve">
    <value>Not enough information to target a method</value>
  </data>
  <data name="TargetMethodMustExistMessageFormat" xml:space="preserve">
    <value>Target method '{0}' does not exist in type '{1}'.</value>
  </data>
  <data name="TargetMethodMustExistTitle" xml:space="preserve">
    <value>Target method does not exist</value>
  </data>
  <data name="TargetMethodMustNotBeAmbiguousMessageFormat" xml:space="preserve">
    <value>Ambiguous match on target method '{0}' in type '{1}': {2} candidates found.</value>
  </data>
  <data name="TargetMethodMustNotBeAmbiguousTitle" xml:space="preserve">
    <value>Ambiguous match on target method</value>
  </data>
  <data name="TargetMethodMustNotBeOverspecifiedMessageFormat" xml:space="preserve">
    <value>Conflicting method specifications found.</value>
  </data>
  <data name="TargetMethodMustNotBeOverspecifiedTitle" xml:space="preserve">
    <value>Conflicting method specifications found</value>
  </data>
  <data name="PatchMethodMustHaveSingleKindMessageFormat" xml:space="preserve">
    <value>Multiple method kinds are assigned to the patch method. Only one method kind will be recognized.</value>
  </data>
  <data name="PatchMethodMustHaveSingleKindTitle" xml:space="preserve">
    <value>Multiple method kinds are assigned to the patch method</value>
  </data>
  <data name="PatchMethodsMustBeStaticMessageFormat" xml:space="preserve">
    <value>Patch method must be static.</value>
  </data>
  <data name="PatchMethodsMustBeStaticTitle" xml:space="preserve">
    <value>Patch method must be static</value>
  </data>
  <data name="TargetTypeMustExistMessageFormat" xml:space="preserve">
    <value>Target type '{0}' does not exist.</value>
  </data>
  <data name="TargetTypeMustExistTitle" xml:space="preserve">
    <value>Target type does not exist</value>
  </data>
  <data name="ArgumentNewNamesMustBeUniqueMessageFormat" xml:space="preserve">
    <value>Duplicate argument name '{0}'.</value>
  </data>
  <data name="ArgumentNewNamesMustBeUniqueTitle" xml:space="preserve">
    <value>Duplicate argument name</value>
  </data>
  <data name="ArgumentsOnTypesAndMethodsMustHaveNewNameMessageFormat" xml:space="preserve">
    <value>Missing new name for an argument.</value>
  </data>
  <data name="ArgumentsOnTypesAndMethodsMustHaveNewNameTitle" xml:space="preserve">
    <value>Missing new name for an argument</value>
  </data>
  <data name="DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsMessageFormat" xml:space="preserve">
    <value>Target method annotations have no effect on non-primary patch methods.</value>
  </data>
  <data name="DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsTitle" xml:space="preserve">
    <value>Target method annotations have no effect on non-primary patch methods</value>
  </data>
  <data name="PatchMethodsMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Patch method is generic. Only non-generic methods are allowed.</value>
  </data>
  <data name="PatchMethodsMustNotBeGenericTitle" xml:space="preserve">
    <value>Patch method is generic</value>
  </data>
  <data name="PatchTypeMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Patch type is generic. Only non-generic types are allowed.</value>
  </data>
  <data name="PatchTypeMustNotBeGenericTitle" xml:space="preserve">
    <value>Patch type is generic</value>
  </data>
  <data name="TargetTypeMustBeNamedTypeMessageFormat" xml:space="preserve">
    <value>Target type '{0}' is not a named type. Arrays and pointers are not allowed.</value>
  </data>
  <data name="TargetTypeMustBeNamedTypeTitle" xml:space="preserve">
    <value>Target type is not a named type</value>
  </data>
  <data name="TargetTypeMustNotBeOpenGenericTypeMessageFormat" xml:space="preserve">
    <value>Target type '{0}' is an open generic type. Only non-generic and closed generic types are allowed.</value>
  </data>
  <data name="TargetTypeMustNotBeOpenGenericTypeTitle" xml:space="preserve">
    <value>Target type is an open generic type</value>
  </data>
  <data name="TargetMethodMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Target method '{0}' of type '{1}' is generic. Only non-generic methods are allowed when specifying target method via attributes.</value>
  </data>
  <data name="TargetMethodMustNotBeGenericTitle" xml:space="preserve">
    <value>Target method is generic</value>
  </data>
</root>