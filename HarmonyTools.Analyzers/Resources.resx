<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentTypesAndVariationsMustMatchMessageFormat" xml:space="preserve">
    <value>Argument types and argument variations have differing number of items.</value>
  </data>
  <data name="ArgumentTypesAndVariationsMustMatchTitle" xml:space="preserve">
    <value>Argument types and argument variations mismatch</value>
  </data>
  <data name="AttributeArgumentsMustBeValidMessageFormat" xml:space="preserve">
    <value>Invalid attribute argument.</value>
  </data>
  <data name="AttributeArgumentsMustBeValidTitle" xml:space="preserve">
    <value>Invalid attribute argument</value>
  </data>
  <data name="DontDefineMultipleAuxiliaryPatchMethodsMessageFormat" xml:space="preserve">
    <value>Multiple auxiliary patch methods of the same kind are defined. Only the first one will be executed.</value>
  </data>
  <data name="DontDefineMultipleAuxiliaryPatchMethodsTitle" xml:space="preserve">
    <value>Multiple auxiliary patch methods of the same kind are defined</value>
  </data>
  <data name="DontUseIndividualAnnotationsWithBulkPatchingMessageFormat" xml:space="preserve">
    <value>Bulk patching can't be combined with individual target method annotations.</value>
  </data>
  <data name="DontUseIndividualAnnotationsWithBulkPatchingTitle" xml:space="preserve">
    <value>Bulk patching can't be combined with individual target method annotations</value>
  </data>
  <data name="DontUseMultipleBulkPatchingMethodsMessageFormat" xml:space="preserve">
    <value>Only single method of bulk patching is allowed.</value>
  </data>
  <data name="DontUseMultipleBulkPatchingMethodsTitle" xml:space="preserve">
    <value>Only single method of bulk patching is allowed</value>
  </data>
  <data name="HarmonyPatchAttributeMustBeOnTypeMessageFormat" xml:space="preserve">
    <value>Missing HarmonyPatch attribute on type. Specified patches will not be discovered.</value>
  </data>
  <data name="HarmonyPatchAttributeMustBeOnTypeTitle" xml:space="preserve">
    <value>Missing HarmonyPatch attribute on type</value>
  </data>
  <data name="TargetMethodMustBeFullySpecifiedMessageFormat" xml:space="preserve">
    <value>Not enough information to target a method.</value>
  </data>
  <data name="TargetMethodMustBeFullySpecifiedTitle" xml:space="preserve">
    <value>Not enough information to target a method</value>
  </data>
  <data name="TargetMethodMustExistMessageFormat" xml:space="preserve">
    <value>Target method '{0}' does not exist in type '{1}'.</value>
  </data>
  <data name="TargetMethodMustExistTitle" xml:space="preserve">
    <value>Target method does not exist</value>
  </data>
  <data name="TargetMethodMustNotBeAmbiguousMessageFormat" xml:space="preserve">
    <value>Ambiguous match on target method '{0}' in type '{1}': {2} candidates found.</value>
  </data>
  <data name="TargetMethodMustNotBeAmbiguousTitle" xml:space="preserve">
    <value>Ambiguous match on target method</value>
  </data>
  <data name="TargetMethodMustNotBeOverspecifiedMessageFormat" xml:space="preserve">
    <value>Conflicting method specifications found.</value>
  </data>
  <data name="TargetMethodMustNotBeOverspecifiedTitle" xml:space="preserve">
    <value>Conflicting method specifications found</value>
  </data>
  <data name="PatchMethodMustHaveSingleKindMessageFormat" xml:space="preserve">
    <value>Multiple method kinds are assigned to the patch method. Only one method kind will be recognized.</value>
  </data>
  <data name="PatchMethodMustHaveSingleKindTitle" xml:space="preserve">
    <value>Multiple method kinds are assigned to the patch method</value>
  </data>
  <data name="PatchMethodsMustBeStaticMessageFormat" xml:space="preserve">
    <value>Patch method must be static.</value>
  </data>
  <data name="PatchMethodsMustBeStaticTitle" xml:space="preserve">
    <value>Patch method must be static</value>
  </data>
  <data name="TargetTypeMustExistMessageFormat" xml:space="preserve">
    <value>Target type '{0}' does not exist.</value>
  </data>
  <data name="TargetTypeMustExistTitle" xml:space="preserve">
    <value>Target type does not exist</value>
  </data>
  <data name="MultipleArgumentsMustNotTargetSameParameterMessageFormat" xml:space="preserve">
    <value>Multiple arguments target the same target method '{0}' parameter '{1}'.</value>
  </data>
  <data name="MultipleArgumentsMustNotTargetSameParameterTitle" xml:space="preserve">
    <value>Multiple arguments target the same target method parameter</value>
  </data>
  <data name="ArgumentsOnTypesAndMethodsMustHaveNewNameMessageFormat" xml:space="preserve">
    <value>Missing new name for an argument.</value>
  </data>
  <data name="ArgumentsOnTypesAndMethodsMustHaveNewNameTitle" xml:space="preserve">
    <value>Missing new name for an argument</value>
  </data>
  <data name="DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsMessageFormat" xml:space="preserve">
    <value>Target method annotations have no effect on non-primary patch methods.</value>
  </data>
  <data name="DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsTitle" xml:space="preserve">
    <value>Target method annotations have no effect on non-primary patch methods</value>
  </data>
  <data name="PatchMethodsMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Patch method is generic. Only non-generic methods are allowed.</value>
  </data>
  <data name="PatchMethodsMustNotBeGenericTitle" xml:space="preserve">
    <value>Patch method is generic</value>
  </data>
  <data name="PatchTypeMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Patch type is generic. Only non-generic types are allowed.</value>
  </data>
  <data name="PatchTypeMustNotBeGenericTitle" xml:space="preserve">
    <value>Patch type is generic</value>
  </data>
  <data name="TargetTypeMustBeNamedTypeMessageFormat" xml:space="preserve">
    <value>Target type '{0}' is not a named type. Arrays and pointers are not allowed.</value>
  </data>
  <data name="TargetTypeMustBeNamedTypeTitle" xml:space="preserve">
    <value>Target type is not a named type</value>
  </data>
  <data name="TargetTypeMustNotBeOpenGenericTypeMessageFormat" xml:space="preserve">
    <value>Target type '{0}' is an open generic type. Only non-generic and closed generic types are allowed.</value>
  </data>
  <data name="TargetTypeMustNotBeOpenGenericTypeTitle" xml:space="preserve">
    <value>Target type is an open generic type</value>
  </data>
  <data name="PatchMethodReturnTypesMustBeCorrectWithSubtypesMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' return type. Valid types are: {1} and their subtypes.</value>
  </data>
  <data name="PatchMethodReturnTypesMustBeCorrectTitle" xml:space="preserve">
    <value>Incorrect patch method return type</value>
  </data>
  <data name="TargetMethodMustNotBeGenericMessageFormat" xml:space="preserve">
    <value>Target method '{0}' of type '{1}' is generic. Only non-generic methods are allowed when specifying target method via attributes.</value>
  </data>
  <data name="TargetMethodMustNotBeGenericTitle" xml:space="preserve">
    <value>Target method is generic</value>
  </data>
  <data name="PatchMethodParametersMustBeValidInjectionsMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' is not a recognized injection.</value>
  </data>
  <data name="PatchMethodParametersMustBeValidInjectionsTitle" xml:space="preserve">
    <value>Patch method parameter is not a recognized injection</value>
  </data>
  <data name="PatchMethodParameterTypesMustBeCorrectWithSupertypesMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' parameter '{1}' type. Valid types are: {2} and their supertypes.</value>
  </data>
  <data name="PatchMethodParameterTypesMustBeCorrectTitle" xml:space="preserve">
    <value>Incorrect patch method parameter type</value>
  </data>
  <data name="DontUseInstanceParameterWithStaticMethodsMessageFormat" xml:space="preserve">
    <value>'__instance' parameter is used with static target method '{0}'. The parameter will be always null.</value>
  </data>
  <data name="DontUseInstanceParameterWithStaticMethodsTitle" xml:space="preserve">
    <value>'__instance' parameter is used with static target method</value>
  </data>
  <data name="DontUseResultRefWithMethodsNotReturningByRefMessageFormat" xml:space="preserve">
    <value>'__resultRef' parameter is used with target method '{0}' which does not return by reference.</value>
  </data>
  <data name="DontUseResultRefWithMethodsNotReturningByRefTitle" xml:space="preserve">
    <value>'__resultRef' parameter is used with target method which does not return by reference</value>
  </data>
  <data name="DontUseResultWithMethodsReturningByRefMessageFormat" xml:space="preserve">
    <value>'__result' parameter is used with target method '{0}' which returns by reference.</value>
  </data>
  <data name="DontUseResultWithMethodsReturningByRefTitle" xml:space="preserve">
    <value>'__result' parameter is used with target method which returns by reference</value>
  </data>
  <data name="DontUseResultWithMethodsReturningVoidMessageFormat" xml:space="preserve">
    <value>'__result' parameter is used with target method '{0}' which returns 'void'.</value>
  </data>
  <data name="DontUseResultWithMethodsReturningVoidTitle" xml:space="preserve">
    <value>'__result' parameter is used with target method which returns 'void'</value>
  </data>
  <data name="ParameterMustBeByRefMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' must be passed by reference.</value>
  </data>
  <data name="ParameterMustBeByRefTitle" xml:space="preserve">
    <value>Patch method parameter must be passed by reference</value>
  </data>
  <data name="ParameterMustNotBeByRefMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' must not be passed by reference.</value>
  </data>
  <data name="ParameterMustNotBeByRefTitle" xml:space="preserve">
    <value>Patch method parameter must not be passed by reference</value>
  </data>
  <data name="PatchMethodDelegateParametersMustBeAnnotatedWithHarmonyDelegateMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' type '{2}' is not annotated with HarmonyDelegate.</value>
  </data>
  <data name="PatchMethodDelegateParametersMustBeAnnotatedWithHarmonyDelegateTitle" xml:space="preserve">
    <value>Patch method parameter type is not annotated with HarmonyDelegate</value>
  </data>
  <data name="PatchMethodParameterTypesMustBeCorrectExactMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' parameter '{1}' type. Valid types are: {2}.</value>
  </data>
  <data name="TargetMethodParameterWithSpecifiedIndexMustExistMessageFormat" xml:space="preserve">
    <value>Target method '{0}' parameter with index {1} corresponding to patch method '{2}' parameter '{3}' does not exist.</value>
  </data>
  <data name="TargetMethodParameterWithSpecifiedIndexMustExistTitle" xml:space="preserve">
    <value>Target method parameter with specified index does not exist</value>
  </data>
  <data name="TargetMethodParameterWithSpecifiedNameMustExistMessageFormat" xml:space="preserve">
    <value>Target method '{0}' parameter with name '{1}' corresponding to patch method '{2}' parameter '{3}' does not exist.</value>
  </data>
  <data name="TargetMethodParameterWithSpecifiedNameMustExistTitle" xml:space="preserve">
    <value>Target method parameter with specified name does not exist</value>
  </data>
  <data name="TargetTypeFieldWithSpecifiedIndexMustExistMessageFormat" xml:space="preserve">
    <value>Target type '{0}' field with index {1} corresponding to patch method '{2}' parameter '{3}' does not exist.</value>
  </data>
  <data name="TargetTypeFieldWithSpecifiedIndexMustExistTitle" xml:space="preserve">
    <value>Target type field with specified index does not exist</value>
  </data>
  <data name="TargetTypeFieldWithSpecifiedNameMustExistMessageFormat" xml:space="preserve">
    <value>Target type '{0}' field with name '{1}' corresponding to patch method '{2}' parameter '{3}' does not exist.</value>
  </data>
  <data name="TargetTypeFieldWithSpecifiedNameMustExistTitle" xml:space="preserve">
    <value>Target type field with specified name does not exist</value>
  </data>
  <data name="AllTargetMethodParametersMustBeIncludedMessageFormat" xml:space="preserve">
    <value>Target method '{0}' parameter '{1}' does not have a corresponding patch method '{2}' parameter.</value>
  </data>
  <data name="AllTargetMethodParametersMustBeIncludedTitle" xml:space="preserve">
    <value>Target method parameter does not have a corresponding patch method parameter</value>
  </data>
  <data name="InstanceParameterMustBePresentMessageFormat" xml:space="preserve">
    <value>A parameter for target type '{0}' instance must be present as the first parameter of the patch method '{1}'.</value>
  </data>
  <data name="InstanceParameterMustBePresentTitle" xml:space="preserve">
    <value>A parameter for target type instance must be present</value>
  </data>
  <data name="InstanceParameterMustNotBePresentMessageFormat" xml:space="preserve">
    <value>A parameter for target type '{0}' instance must not be present as the first parameter of the patch method '{1}'.</value>
  </data>
  <data name="InstanceParameterMustNotBePresentTitle" xml:space="preserve">
    <value>A parameter for target type instance must not be present</value>
  </data>
  <data name="PatchMethodParameterTypesMustBeCorrectWithSubtypesMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' parameter '{1}' type. Valid types are: {2} and their subtypes.</value>
  </data>
  <data name="PatchMethodReturnTypesMustBeCorrectExactMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' return type. Valid types are: {1}.</value>
  </data>
  <data name="PatchMethodReturnTypesMustBeCorrectWithSupertypesMessageFormat" xml:space="preserve">
    <value>Incorrect patch method '{0}' return type. Valid types are: {1} and their supertypes.</value>
  </data>
  <data name="PatchMethodsMustNotReturnByRefMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' must not return by reference.</value>
  </data>
  <data name="PatchMethodsMustNotReturnByRefTitle" xml:space="preserve">
    <value>Patch method must not return by reference</value>
  </data>
  <data name="ReversePatchMethodParameterMustCorrespondToTargetMethodParameterMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' does not correspond to a target method '{2}' parameter.</value>
  </data>
  <data name="ReversePatchMethodParameterMustCorrespondToTargetMethodParameterTitle" xml:space="preserve">
    <value>Patch method parameter does not correspond to a target method parameter</value>
  </data>
  <data name="ReversePatchMethodParameterMustHaveCorrectRefKindMessageFormat" xml:space="preserve">
    <value>Patch method '{0}' parameter '{1}' does not have the same reference kind as the target method '{2}' parameter. Expected: {3}.</value>
  </data>
  <data name="ReversePatchMethodParameterMustHaveCorrectRefKindTitle" xml:space="preserve">
    <value>Patch method parameter does not have the same reference kind as the target method parameter</value>
  </data>
  <data name="StateShouldBeInitializedMessageFormat" xml:space="preserve">
    <value>'__state' parameter is never assigned by reference. It will always have the default value.</value>
  </data>
  <data name="StateShouldBeInitializedTitle" xml:space="preserve">
    <value>'__state' parameter is never assigned</value>
  </data>
  <data name="StateTypeMustNotDifferMessageFormat" xml:space="preserve">
    <value>'__state' parameter type must not differ within same patch type.</value>
  </data>
  <data name="StateTypeMustNotDifferTitle" xml:space="preserve">
    <value>'__state' parameter type must not differ</value>
  </data>
  <data name="ArgumentNewNamesMustCorrespondToParameterNamesMessageFormat" xml:space="preserve">
    <value>Argument new name '{0}' does not correspond to a patch method parameter.</value>
  </data>
  <data name="ArgumentNewNamesMustCorrespondToParameterNamesTitle" xml:space="preserve">
    <value>Argument new name does not correspond to a patch method parameter</value>
  </data>
  <data name="DontUseArgumentsWithSpecialParametersMessageFormat" xml:space="preserve">
    <value>HarmonyArgument is used on special patch method '{0}' parameter '{1}'. It will have no effect.</value>
  </data>
  <data name="DontUseArgumentsWithSpecialParametersTitle" xml:space="preserve">
    <value>HarmonyArgument is used on special patch method parameter</value>
  </data>
  <data name="DelegateMustBeCalledWithCorrectInstanceMessageFormat" xml:space="preserve">
    <value>Delegate is called with incorrent instance. It can only be called from patch methods, target method of which is an instance method of '{0}' type.</value>
  </data>
  <data name="DelegateMustBeCalledWithCorrectInstanceTitle" xml:space="preserve">
    <value>Delegate is called with incorrent instance</value>
  </data>
  <data name="DontUseBulkPatchingMethodsWithReversePatchesMessageFormat" xml:space="preserve">
    <value>Reverse patch cannot be used with bulk patching.</value>
  </data>
  <data name="DontUseBulkPatchingMethodsWithReversePatchesTitle" xml:space="preserve">
    <value>Reverse patch cannot be used with bulk patching</value>
  </data>
</root>