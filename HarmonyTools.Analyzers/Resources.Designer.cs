//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HarmonyTools.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HarmonyTools.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument types and argument variations have differing number of items..
        /// </summary>
        internal static string ArgumentTypesAndVariationsMustMatchMessageFormat {
            get {
                return ResourceManager.GetString("ArgumentTypesAndVariationsMustMatchMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument types and argument variations mismatch.
        /// </summary>
        internal static string ArgumentTypesAndVariationsMustMatchTitle {
            get {
                return ResourceManager.GetString("ArgumentTypesAndVariationsMustMatchTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid attribute argument..
        /// </summary>
        internal static string AttributeArgumentsMustBeValidMessageFormat {
            get {
                return ResourceManager.GetString("AttributeArgumentsMustBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid attribute argument.
        /// </summary>
        internal static string AttributeArgumentsMustBeValidTitle {
            get {
                return ResourceManager.GetString("AttributeArgumentsMustBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple auxiliary patch methods of the same kind are defined. Only the first one will be executed..
        /// </summary>
        internal static string DontDefineMultipleAuxiliaryPatchMethodsMessageFormat {
            get {
                return ResourceManager.GetString("DontDefineMultipleAuxiliaryPatchMethodsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple auxiliary patch methods of the same kind are defined.
        /// </summary>
        internal static string DontDefineMultipleAuxiliaryPatchMethodsTitle {
            get {
                return ResourceManager.GetString("DontDefineMultipleAuxiliaryPatchMethodsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bulk patching can&apos;t be combined with individual target method annotations..
        /// </summary>
        internal static string DontUseIndividualAnnotationsWithBulkPatchingMessageFormat {
            get {
                return ResourceManager.GetString("DontUseIndividualAnnotationsWithBulkPatchingMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bulk patching can&apos;t be combined with individual target method annotations.
        /// </summary>
        internal static string DontUseIndividualAnnotationsWithBulkPatchingTitle {
            get {
                return ResourceManager.GetString("DontUseIndividualAnnotationsWithBulkPatchingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only single method of bulk patching is allowed..
        /// </summary>
        internal static string DontUseMultipleBulkPatchingMethodsMessageFormat {
            get {
                return ResourceManager.GetString("DontUseMultipleBulkPatchingMethodsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only single method of bulk patching is allowed.
        /// </summary>
        internal static string DontUseMultipleBulkPatchingMethodsTitle {
            get {
                return ResourceManager.GetString("DontUseMultipleBulkPatchingMethodsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target method annotations have no effect on non-primary patch methods..
        /// </summary>
        internal static string DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsMessageFormat {
            get {
                return ResourceManager.GetString("DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target method annotations have no effect on non-primary patch methods.
        /// </summary>
        internal static string DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsTitle {
            get {
                return ResourceManager.GetString("DontUseTargetMethodAnnotationsOnNonPrimaryPatchMethodsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing HarmonyPatch attribute on type. Specified patches will not be discovered..
        /// </summary>
        internal static string HarmonyPatchAttributeMustBeOnTypeMessageFormat {
            get {
                return ResourceManager.GetString("HarmonyPatchAttributeMustBeOnTypeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing HarmonyPatch attribute on type.
        /// </summary>
        internal static string HarmonyPatchAttributeMustBeOnTypeTitle {
            get {
                return ResourceManager.GetString("HarmonyPatchAttributeMustBeOnTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple method kinds are assigned to the patch method. Only one method kind will be recognized..
        /// </summary>
        internal static string PatchMethodMustHaveSingleKindMessageFormat {
            get {
                return ResourceManager.GetString("PatchMethodMustHaveSingleKindMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple method kinds are assigned to the patch method.
        /// </summary>
        internal static string PatchMethodMustHaveSingleKindTitle {
            get {
                return ResourceManager.GetString("PatchMethodMustHaveSingleKindTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch method must be static..
        /// </summary>
        internal static string PatchMethodsMustBeStaticMessageFormat {
            get {
                return ResourceManager.GetString("PatchMethodsMustBeStaticMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch method must be static.
        /// </summary>
        internal static string PatchMethodsMustBeStaticTitle {
            get {
                return ResourceManager.GetString("PatchMethodsMustBeStaticTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch method is generic. Only non-generic methods are allowed..
        /// </summary>
        internal static string PatchMethodsMustNotBeGenericMessageFormat {
            get {
                return ResourceManager.GetString("PatchMethodsMustNotBeGenericMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch method is generic.
        /// </summary>
        internal static string PatchMethodsMustNotBeGenericTitle {
            get {
                return ResourceManager.GetString("PatchMethodsMustNotBeGenericTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch type is generic. Only non-generic types are allowed..
        /// </summary>
        internal static string PatchTypeMustNotBeGenericMessageFormat {
            get {
                return ResourceManager.GetString("PatchTypeMustNotBeGenericMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Patch type is generic.
        /// </summary>
        internal static string PatchTypeMustNotBeGenericTitle {
            get {
                return ResourceManager.GetString("PatchTypeMustNotBeGenericTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough information to target a method..
        /// </summary>
        internal static string TargetMethodMustBeFullySpecifiedMessageFormat {
            get {
                return ResourceManager.GetString("TargetMethodMustBeFullySpecifiedMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough information to target a method.
        /// </summary>
        internal static string TargetMethodMustBeFullySpecifiedTitle {
            get {
                return ResourceManager.GetString("TargetMethodMustBeFullySpecifiedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target method &apos;{0}&apos; does not exist in type &apos;{1}&apos;..
        /// </summary>
        internal static string TargetMethodMustExistMessageFormat {
            get {
                return ResourceManager.GetString("TargetMethodMustExistMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target method does not exist.
        /// </summary>
        internal static string TargetMethodMustExistTitle {
            get {
                return ResourceManager.GetString("TargetMethodMustExistTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous match on target method &apos;{0}&apos; in type &apos;{1}&apos;: {2} candidates found..
        /// </summary>
        internal static string TargetMethodMustNotBeAmbiguousMessageFormat {
            get {
                return ResourceManager.GetString("TargetMethodMustNotBeAmbiguousMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous match on target method.
        /// </summary>
        internal static string TargetMethodMustNotBeAmbiguousTitle {
            get {
                return ResourceManager.GetString("TargetMethodMustNotBeAmbiguousTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicting method specifications found..
        /// </summary>
        internal static string TargetMethodMustNotBeOverspecifiedMessageFormat {
            get {
                return ResourceManager.GetString("TargetMethodMustNotBeOverspecifiedMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicting method specifications found.
        /// </summary>
        internal static string TargetMethodMustNotBeOverspecifiedTitle {
            get {
                return ResourceManager.GetString("TargetMethodMustNotBeOverspecifiedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type &apos;{0}&apos; is not a named type. Arrays and pointers are not allowed..
        /// </summary>
        internal static string TargetTypeMustBeNamedTypeMessageFormat {
            get {
                return ResourceManager.GetString("TargetTypeMustBeNamedTypeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type is not a named type.
        /// </summary>
        internal static string TargetTypeMustBeNamedTypeTitle {
            get {
                return ResourceManager.GetString("TargetTypeMustBeNamedTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type &apos;{0}&apos; does not exist..
        /// </summary>
        internal static string TargetTypeMustExistMessageFormat {
            get {
                return ResourceManager.GetString("TargetTypeMustExistMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type does not exist.
        /// </summary>
        internal static string TargetTypeMustExistTitle {
            get {
                return ResourceManager.GetString("TargetTypeMustExistTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type &apos;{0}&apos; is an open generic type. Only non-generic and closed generic types are allowed..
        /// </summary>
        internal static string TargetTypeMustNotBeOpenGenericTypeMessageFormat {
            get {
                return ResourceManager.GetString("TargetTypeMustNotBeOpenGenericTypeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type is an open generic type.
        /// </summary>
        internal static string TargetTypeMustNotBeOpenGenericTypeTitle {
            get {
                return ResourceManager.GetString("TargetTypeMustNotBeOpenGenericTypeTitle", resourceCulture);
            }
        }
    }
}
